diff --git a/Makefile b/Makefile
index 5cfc763..c04e51a 100644
--- a/Makefile
+++ b/Makefile
@@ -354,7 +354,7 @@ export RCS_TAR_IGNORE := --exclude SCCS --exclude BitKeeper --exclude .svn --exc
 # Basic helpers built in scripts/
 PHONY += scripts_basic
 scripts_basic:
-	$(Q)$(MAKE) $(build)=scripts/basic
+	$(Q)$(MAKE) $(build)=scripts/basic objdest=""
 
 # To avoid any implicit rule to kick in, define an empty command.
 scripts/basic/%: scripts_basic ;
@@ -369,7 +369,7 @@ gen_build_files: $(wildcard $(srctree)/*/*.c) $(wildcard $(srctree)/*/*/*.c)
 # must be built before any other host prog
 PHONY += applets_dir
 applets_dir: scripts_basic gen_build_files
-	$(Q)$(MAKE) $(build)=applets
+	$(Q)$(MAKE) $(build)=applets objdest=""
 
 applets/%: applets_dir ;
 
@@ -464,33 +464,9 @@ core-y		:= \
 		applets/ \
 
 libs-y		:= \
-		archival/ \
-		archival/libarchive/ \
-		console-tools/ \
 		coreutils/ \
-		coreutils/libcoreutils/ \
-		debianutils/ \
-		e2fsprogs/ \
 		editors/ \
-		findutils/ \
-		init/ \
 		libbb/ \
-		libpwdgrp/ \
-		loginutils/ \
-		mailutils/ \
-		miscutils/ \
-		modutils/ \
-		networking/ \
-		networking/libiproute/ \
-		networking/udhcp/ \
-		printutils/ \
-		procps/ \
-		runit/ \
-		selinux/ \
-		shell/ \
-		sysklogd/ \
-		util-linux/ \
-		util-linux/volume_id/ \
 
 endif # KBUILD_EXTMOD
 
@@ -713,10 +689,20 @@ debug_kallsyms: .tmp_map$(last_kallsyms)
 endif # ifdef CONFIG_KALLSYMS
 
 # busybox image - including updated kernel symbols
+ifeq ("YBUILD", "YBUILD")
+busybox_unstripped: $(busybox-all) FORCE
+
+else
 busybox_unstripped: $(busybox-all) FORCE
 	$(call if_changed_rule,busybox__)
 	$(Q)rm -f .old_version
 
+endif
+
+ifeq ("YBUILD", "YBUILD")
+busybox: busybox_unstripped
+
+else
 busybox: busybox_unstripped
 ifeq ($(SKIP_STRIP),y)
 	$(Q)cp $< $@
@@ -727,6 +713,8 @@ else
 	$(Q)chmod a+x $@
 endif
 
+endif
+
 # The actual objects are generated when descending,
 # make sure no implicit rule kicks in
 $(sort $(busybox-all)): $(busybox-dirs) ;
@@ -820,7 +808,7 @@ ifneq ($(KBUILD_MODULES),)
 	$(Q)rm -f $(MODVERDIR)/*
 endif
 
-archprepare: prepare1 scripts_basic applets_dir
+archprepare: prepare1 scripts_basic
 
 prepare0: archprepare FORCE
 	$(Q)$(MAKE) $(build)=.
diff --git a/applets/Kbuild.src b/applets/Kbuild.src
index 3aedbbf..8e4f47b 100644
--- a/applets/Kbuild.src
+++ b/applets/Kbuild.src
@@ -8,7 +8,9 @@ obj-y :=
 obj-y += applets.o
 
 hostprogs-y:=
-hostprogs-y += usage usage_pod applet_tables
+ifeq ($(objdest),)
+	hostprogs-y += usage usage_pod applet_tables
+endif
 
 always:= $(hostprogs-y)
 
diff --git a/include/libbb.h b/include/libbb.h
index 3752df9..0eb0a45 100644
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -2147,4 +2147,48 @@ void bbunit_settestfailed(void);
 
 POP_SAVED_FUNCTION_VISIBILITY
 
+#ifdef IOS
+void setplatform(const struct Platform *newval);
+# undef opendir
+# define opendir(p)	(platform.opendir((p)))
+# undef lstat
+# define lstat(p, b)	(platform.lstat((p), (b)))
+# undef stat
+# define stat(p, b)	(platform.stat((p), (b)))
+# undef chmod
+# define chmod(p, m)	(platform.chmod((p), (m)))
+# undef mkdir
+# define mkdir(p, m)	(platform.mkdir((p), (m)))
+# undef getcwd
+# define getcwd(b, s)	(platform.getcwd((b), (s)))
+# undef creat
+# define creat(p, m)	(platform.creat((p), (m)))
+# undef fopen
+# define fopen(p, q)	(platform.fopen((p), (q)))
+# undef open
+# define open(...)	(platform.open(__VA_ARGS__))
+# undef fflush
+# define fflush(p)	(platform.fflush((p)))
+# undef writev
+# define writev(a0, a1, a2)	(platform.writev((a0), (a1), (a2)))
+# undef printf
+# define printf(...)	(platform.printf(__VA_ARGS__))
+# undef puts
+# define puts(p)	(platform.puts((p)))
+# undef close
+# define close(p)	(platform.close((p)))
+# undef read
+# define read(f, b, nb)	(platform.read((f), (b), (nb)))
+# undef write
+# define write(f, b, nb)	(platform.write((f), (b), (nb)))
+# undef fputs
+# define fputs(s, f)	(platform.fputs((s), (f)))
+# undef fputc
+# define fputc(c, f)	(platform.fputc((c), (f)))
+# undef fgets
+# define fgets(s, n, f)	(platform.fgets((s), (n), (f)))
+# undef putchar
+# define putchar(c)	(platform.putchar((c)))
+#endif
+
 #endif
diff --git a/include/platform.h b/include/platform.h
index c987d41..e666ec0 100644
--- a/include/platform.h
+++ b/include/platform.h
@@ -109,7 +109,7 @@
  * on non-static, busybox internal functions. Recent versions of gcc
  * optimize statics automatically. FAST_FUNC on static is required
  * only if you need to match a function pointer's type */
-#if __GNUC_PREREQ(3,0) && defined(i386) /* || defined(__x86_64__)? */
+#if __GNUC_PREREQ(3,0) && defined(i386) /* || defined(__x86_64__)? */ && !defined(IOS)
 /* stdcall makes callee to pop arguments from stack, not caller */
 # define FAST_FUNC __attribute__((regparm(3),stdcall))
 /* #elif ... - add your favorite arch today! */
@@ -501,6 +501,38 @@ typedef unsigned smalluint;
 # undef HAVE_NET_ETHERNET_H
 #endif
 
+#if defined(IOS)
+# undef HAVE_MEMPCPY
+#include <dirent.h>
+#include <sys/stat.h>
+#include <sys/uio.h>
+#include <stdint.h>
+#include <stdio.h>
+struct Platform {
+	DIR *(*opendir)(const char *);
+	int (*lstat)(const char *, struct stat *);
+	int (*stat)(const char *, struct stat *);
+	int (*chmod)(const char *, mode_t);
+	int (*mkdir)(const char *, mode_t);
+	char *(*getcwd)(char *, size_t);
+	int (*creat)(const char *, mode_t);
+	FILE *(*fopen)(const char *, const char *);
+	int (*open)(const char *, int oflags, ...);
+	int (*fflush)(FILE *);
+	ssize_t (*writev)(int, const struct iovec *, int);
+	int (*printf)(const char *, ...);
+	int (*puts)(const char *);
+	int (*close)(int);
+	ssize_t (*read)(int, void *, size_t);
+	ssize_t (*write)(int, const void *, size_t);
+	int (*fputs)(const char *, FILE *);
+	int (*fputc)(int, FILE *);
+	char *(*fgets)(char *, int, FILE *);
+	int (*putchar)(int);
+};
+extern struct Platform platform;
+#endif
+
 /*
  * Now, define prototypes for all the functions defined in platform.c
  * These must come after all the HAVE_* macros are defined (or not)
diff --git a/libbb/Kbuild.src b/libbb/Kbuild.src
index 52a90e9..87e4696 100644
--- a/libbb/Kbuild.src
+++ b/libbb/Kbuild.src
@@ -45,17 +45,20 @@ lib-y += getpty.o
 lib-y += get_volsize.o
 lib-y += herror_msg.o
 lib-y += human_readable.o
-lib-y += inet_common.o
+# YBUILD
+#lib-y += inet_common.o
 lib-y += inode_hash.o
 lib-y += isdirectory.o
 lib-y += kernel_version.o
 lib-y += last_char_is.o
+# YBUILD
 lib-y += lineedit.o lineedit_ptr_hack.o
 lib-y += llist.o
 lib-y += login.o
 lib-y += make_directory.o
 lib-y += makedev.o
-lib-y += hash_md5_sha.o
+# YBUILD
+#lib-y += hash_md5_sha.o
 # Alternative (disabled) MD5 implementation
 #lib-y += hash_md5prime.o
 lib-y += messages.o
@@ -92,7 +95,8 @@ lib-y += speed_table.o
 lib-y += str_tolower.o
 lib-y += strrstr.o
 lib-y += sysconf.o
-lib-y += time.o
+# YBUILD
+#lib-y += time.o
 lib-y += trim.o
 lib-y += u_signal_names.o
 lib-y += uuencode.o
@@ -104,7 +108,8 @@ lib-y += wfopen.o
 lib-y += wfopen_input.o
 lib-y += write.o
 lib-y += xatonum.o
-lib-y += xconnect.o
+# YBUILD
+#lib-y += xconnect.o
 lib-y += xfuncs.o
 lib-y += xfuncs_printf.o
 lib-y += xfunc_die.o
diff --git a/libbb/platform.c b/libbb/platform.c
index 03bbb79..b8a35cb 100644
--- a/libbb/platform.c
+++ b/libbb/platform.c
@@ -213,3 +213,12 @@ int ttyname_r(int fd, char *buf, size_t buflen)
 	return 0;
 }
 #endif
+
+#ifdef IOS
+struct Platform platform;
+
+void setplatform(const struct Platform *newval)
+{
+	memcpy(&platform, newval, sizeof platform);
+}
+#endif
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index 5eac45f..b479173 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -4,6 +4,13 @@
 
 src := $(obj)
 
+objdest := $(objdest)
+ifeq ($(objdest),)
+	objdestprefix :=
+else
+	objdestprefix := $(objdest)/
+endif
+
 PHONY := __build
 __build:
 
@@ -76,7 +83,7 @@ endif
 # ===========================================================================
 
 ifneq ($(strip $(lib-y) $(lib-m) $(lib-n) $(lib-)),)
-lib-target := $(obj)/lib.a
+lib-target := $(objdestprefix)$(obj)/lib.a
 endif
 
 ifneq ($(strip $(obj-y) $(obj-m) $(obj-n) $(obj-) $(lib-target)),)
@@ -193,7 +200,8 @@ endef
 
 # Built-in and composite module parts
 
-%.o: %.c FORCE
+$(objdestprefix)%.o: %.c FORCE
+	-mkdir -p $(dir $@)
 	$(call cmd,force_checksrc)
 	$(call if_changed_rule,cc_o_c)
 
@@ -256,10 +264,18 @@ ifdef builtin-target
 quiet_cmd_link_o_target = LD      $@
 # If the list of objects to link is empty, just create an empty built-in.o
 # -nostdlib is added to make "make LD=gcc ..." work (some people use that)
+ifeq ("YBUILD", "YBUILD")
+cmd_link_o_target = $(if $(strip $(obj-y)),\
+		$(LD) -nostdlib $(ld_flags) -r -o $@ $(filter $(obj-y), $^),\
+		rm -f $@; touch -f $@)
+
+else
 cmd_link_o_target = $(if $(strip $(obj-y)),\
 		$(LD) -nostdlib $(ld_flags) -r -o $@ $(filter $(obj-y), $^),\
 		rm -f $@; $(AR) rcs $@)
 
+endif
+
 $(builtin-target): $(obj-y) FORCE
 	$(call if_changed,link_o_target)
 
diff --git a/scripts/Makefile.lib b/scripts/Makefile.lib
index 3e54ea7..36242dc 100644
--- a/scripts/Makefile.lib
+++ b/scripts/Makefile.lib
@@ -57,22 +57,22 @@ real-objs-m := $(foreach m, $(obj-m), $(if $(strip $($(m:.o=-objs)) $($(m:.o=-y)
 
 # Add subdir path
 
-extra-y		:= $(addprefix $(obj)/,$(extra-y))
-always		:= $(addprefix $(obj)/,$(always))
-targets		:= $(addprefix $(obj)/,$(targets))
-obj-y		:= $(addprefix $(obj)/,$(obj-y))
-obj-m		:= $(addprefix $(obj)/,$(obj-m))
-lib-y		:= $(addprefix $(obj)/,$(lib-y))
-subdir-obj-y	:= $(addprefix $(obj)/,$(subdir-obj-y))
-real-objs-y	:= $(addprefix $(obj)/,$(real-objs-y))
-real-objs-m	:= $(addprefix $(obj)/,$(real-objs-m))
-single-used-m	:= $(addprefix $(obj)/,$(single-used-m))
-multi-used-y	:= $(addprefix $(obj)/,$(multi-used-y))
-multi-used-m	:= $(addprefix $(obj)/,$(multi-used-m))
-multi-objs-y	:= $(addprefix $(obj)/,$(multi-objs-y))
-multi-objs-m	:= $(addprefix $(obj)/,$(multi-objs-m))
-subdir-ym	:= $(addprefix $(obj)/,$(subdir-ym))
-obj-dirs	:= $(addprefix $(obj)/,$(obj-dirs))
+extra-y		:= $(addprefix $(objdestprefix)$(obj)/,$(extra-y))
+always		:= $(addprefix $(objdestprefix)$(obj)/,$(always))
+targets		:= $(addprefix $(objdestprefix)$(obj)/,$(targets))
+obj-y		:= $(addprefix $(objdestprefix)$(obj)/,$(obj-y))
+obj-m		:= $(addprefix $(objdestprefix)$(obj)/,$(obj-m))
+lib-y		:= $(addprefix $(objdestprefix)$(obj)/,$(lib-y))
+subdir-obj-y	:= $(addprefix $(objdestprefix)$(obj)/,$(subdir-obj-y))
+real-objs-y	:= $(addprefix $(objdestprefix)$(obj)/,$(real-objs-y))
+real-objs-m	:= $(addprefix $(objdestprefix)$(obj)/,$(real-objs-m))
+single-used-m	:= $(addprefix $(objdestprefix)$(obj)/,$(single-used-m))
+multi-used-y	:= $(addprefix $(objdestprefix)$(obj)/,$(multi-used-y))
+multi-used-m	:= $(addprefix $(objdestprefix)$(obj)/,$(multi-used-m))
+multi-objs-y	:= $(addprefix $(objdestprefix)$(obj)/,$(multi-objs-y))
+multi-objs-m	:= $(addprefix $(objdestprefix)$(obj)/,$(multi-objs-m))
+subdir-ym	:= $(addprefix $(objdestprefix)$(obj)/,$(subdir-ym))
+obj-dirs	:= $(addprefix $(objdestprefix)$(obj)/,$(obj-dirs))
 
 # These flags are needed for modversions and compiling, so we define them here
 # already
